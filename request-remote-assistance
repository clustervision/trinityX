#!/usr/bin/env python

import os
import re
import subprocess
import sys
import urllib2

sandbox     = 'sandbox.clustervision.com'
sshd_config = '/etc/ssh/sshd_config'
id          = '0nA3LRw1OUrmhd5I'
auth_key    = '/root/.ssh/authorized_keys'
pub_files   = ['/root/.ssh/id_dsa.pub', '/root/.ssh/id_rsa.pub', '/root/.ssh/identity.pub']
pub         = ''
getpubcert  = 1
ok_chars    = 'a-zA-Z0-9 _,-.+#='

def shell(cmd):
    with open(os.devnull) as DEVNULL:
        try:
            return subprocess.check_output(cmd, stderr = DEVNULL, shell = True).strip()
        except subprocess.CalledProcessError:
            return ''

def shell_exit_status(cmd):
    with open(os.devnull) as DEVNULL:
        return subprocess.call(cmd, stdout = DEVNULL, stderr = DEVNULL, shell = True)

def confirm(msg, default):
    answer = ''
    while True:
        sys.stdout.write(msg + ' ')
        if re.search('y', default, re.IGNORECASE):
            sys.stdout.write('[Y/n] ')
        else:
            sys.stdout.write('[y/N] ')
        answer = sys.stdin.readline().strip()
        if re.search('^y|^n', answer, re.IGNORECASE) or answer == '':
            break

    if answer == '':
        answer = default

    if re.search('^y', answer, re.IGNORECASE):
        return 1
    return 0

if int(shell('id -u')) != 0:
    print 'Error: this script must be executed as root.'
    sys.exit(1)

hostname = shell('hostname -f')
if hostname == '':
    hostname = shell('hostname -f')
    hostname += '.NOFQDN'

if len(sys.argv) > 1:
    sandbox = sys.argv[1]
remote_url = 'http://{}/~remote/'.format(sandbox)

trid = shell('cat /trinity/site')
if not re.search('^\d+$', trid):
    trid = 'UNKNOWN'

certificatesubject = 'T=Trinity_C=No_certificate_provided'

print 'This tool helps securely set up a temporary SSH tunnel to {} .'.format(sandbox)
if not confirm('Allow a ClusterVision engineer SSH access to the cluster?', 'y'):
    sys.exit(0)

r1 = shell(""" grep "^RSAAuthentication" /etc/ssh/sshd_config | awk '{print $2}' """)
r2 = shell(""" grep "^PubkeyAuthentication" /etc/ssh/sshd_config | awk '{print $2}' """)
if (r1 != '' and r1 == 'no') or (r2 != '' and r2 == 'no'):
    print '\nWarning: PubkeyAuthentication and/or RSAAuthentication disabled in sshd config.'
    print 'Note: support will not be able to login automatically, you will need to supply'
    print '      the root password when contacted by support.\n'
    if not confirm('Continue?', 'n'):
        sys.exit(0)
    getpubcert = 0

pub_file = ''
for f in pub_files:
    if os.access(f, os.R_OK):
        pub_file = f
        break
if not pub_file:
    print '\nError: found no SSH public key files in /root/.ssh/ use ssh-keygen tool to'
    print '       generate private/public keys.'
    sys.exit(0)
with open(pub_file, 'r') as f:
    pub = f.read()

freetext = ''
info = ''
if confirm('\nDo you want to enter additional information for ClusterVision (e.g.: related\nticket number, problem description)?', 'y'):
    print '\nEnd input with CTRL-D'
    freetext = sys.stdin.read()
    print '\nThank you.'
    for line in freetext.split('\n'):
        line = re.sub('[^{}]'.format(ok_chars), '', line.strip())
        if info:
            info += '##-##' + line
        else:
            info = line

info = '_'.join(info.split(' '))

# Testing the Internet connection.
if shell_exit_status('ping -c1 {}'.format(sandbox)) != 0:
    print 'Error: Unable to ping {} .'.format(sandbox)
    print 'Please check your internet connection.'
    if not confirm('Continue?', 'n'):
        sys.exit(0)

# Request certificate.
pub = re.sub('[^a-zA-Z0-9]', lambda m: '%{0:02X}'.format(ord(m.group(0))), pub)
req = urllib2.Request(remote_url, data = 'hostname={}&getport=1&getpubcert={}&pub={}&id={}'.format(hostname, getpubcert, pub, id), headers = {'Content-type': 'application/x-www-form-urlencoded'})
try:
    res = urllib2.urlopen(req)
    result = res.read().strip()
    spresult = result.split(':##:')
    if getpubcert:
        shell('cp -f {}{{,.remote.bak}}'.format(auth_key))
        shell("""echo -e '\nfrom="127.0.0.1" {}' >> {}""".format(spresult[1], auth_key))
        print '\nAdded temporary ClusterVision public key.'
    # Testing SSH.
    if shell_exit_status('ssh -q localhost exit') != 0:
        print 'Error: Unable to SSH to localhost .'
        print 'Please make sure that SSH service is running and SSH logins to localhost are enabled.'
        sys.exit(0)
    subprocess.call('ssh -t -q -R :{}:localhost:22 remote@{} {} {} {} {} {} {}'.format(spresult[0], sandbox, hostname, spresult[0], getpubcert, trid, certificatesubject, info), shell = True)
    subprocess.call('setterm -cursor on', shell = True)
    print 'Tunnel to {} terminated.'.format(sandbox)
    if getpubcert:
        shell('mv -f {}.remote.bak {}'.format(auth_key, auth_key))
        print 'Removed temporary ClusterVision public key.'
except urllib2.URLError as e:
    print '\nError: could not complete communication with {} .'.format(remote_url)
    print 'Reason: {} .'.format(e.reason)
except urllib2.HTTPError as e:
    print '\nError: {} could not fulfill the request.'.format(remote_url)
    print 'Reason: {} {} .'.format(e.code, e.read())

sys.exit(0)
