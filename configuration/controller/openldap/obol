#!/bin/python

######################################################################
# Obol user management tool
# Copyright (c) 2016  ClusterVision B.V.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (included with the sources) for more
# details.
######################################################################


import os
import sys
import ldap
import time
import hashlib
import argparse
from retrying import retry


def make_secret(password):
    """Encodes the given password as a base64 SSHA hash+salt buffer"""

    if password.startswith('{SSHA}'):
        return password

    salt = os.urandom(4)

    # Hash the password and append the salt
    sha = hashlib.sha1(password)
    sha.update(salt)

    # Create a base64 encoded string of the concatenated digest + salt
    digest_b64 = '{}{}'.format(sha.digest(), salt).encode('base64').strip()

    # Tag the digest above with the {SSHA} tag
    tagged_digest = '{{SSHA}}{}'.format(digest_b64)

    return tagged_digest


def user_add(b, username, cn, sn, givenName, password, shell, groups, expire):
    """Add a user to the LDAP directory"""

    uidNumber = increment_uid(b)

    # Add the user
    dn = 'uid=%s,ou=People,%s' % (username, b)

    if not cn:
        cn = username
    if not sn:
        sn = username

    if config and hasattr(config, 'HOME'):
        home = config.HOME + '/' + username
    else:
        home = '/home/' + username

    if expire and expire != '-1':
        expire = str(int(expire) + int(time.time() / 86400))
    else:
        expire = '-1'

    add_record = [
     ('objectclass', ['top', 'person', 'organizationalPerson',
                      'inetOrgPerson', 'posixAccount', 'shadowAccount']),
     ('uid', [username]),
     ('cn', [cn]),
     ('sn', [sn]),
     ('loginShell', [shell]),
     ('uidNumber', [uidNumber]),
     ('gidNumber', [uidNumber]),
     ('homeDirectory', [home]),
     ('shadowMin', ['0']),
     ('shadowMax', ['99999']),
     ('shadowWarning', ['7']),
     ('shadowExpire', [expire]),
     ('shadowLastChange', ['%d' % (time.time() / 86400)])

    ]

    if givenName:
        add_record.append(('givenName', [givenName]))

    if password:
        password = make_secret(password)
        add_record.append(('userPassword', [password]))

    conn.add_s(dn, add_record)

    # Add the group
    dn = 'cn=%s,ou=Group,%s' % (username, b)
    add_record = [
     ('objectclass', ['top', 'posixGroup']),
     ('cn', [username]),
     ('memberuid', [uidNumber]),
     ('gidNumber', [uidNumber])
    ]
    conn.add_s(dn, add_record)

    if groups:
        for group in groups:
            group_addusers(b, group, [username])


def user_delete(b, username):
    """Delete a user from the system"""

    # Delete the user
    try:
        dn = 'uid=%s,ou=People,%s' % (username, b)
        conn.delete_s(dn)
    except Exception, error:
        print error

    base_dn = 'ou=Group,%s' % b
    filter = '(memberuid=%s)' % username
    attrs = ['']
    groups = conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter, attrs)
    dns = [dn for dn, attrs in groups]

    try:
        for dn in dns:
            mod_attrs = [(ldap.MOD_DELETE, 'memberuid', username)]
            conn.modify_s(dn, mod_attrs)
    except Exception, e:
        print e

    # Delete the group
    try:
        dn = 'cn=%s,ou=Group,%s' % (username, b)
        conn.delete_s(dn)
    except Exception, error:
        print error


def user_list(b):
    """List users defined in the system"""

    base_dn = 'ou=People,%s' % b
    filter = '(objectclass=person)'
    attrs = ['uid']
    for dn, attrs in conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter, attrs):
        print attrs['uid'][0]


def user_modify(b, username, **kwargs):
    """Modify a user"""

    dn = 'uid=%s,ou=People,%s' % (username, b)

    mod_attrs = []

    for key, value in kwargs.iteritems():
        if key == 'shell':
            key = 'loginShell'

        elif key == 'expire':
            key = 'shadowExpire'

            if value and value != '-1':
                value = str(int(value) + int(time.time() / 86400))

        if not value:
            continue

        mod_attrs.append((ldap.MOD_DELETE, key, None))
        mod_attrs.append((ldap.MOD_ADD, key, value))

    conn.modify_s(dn, mod_attrs)


def user_reset(b, username, password):
    """Reset a users password"""

    dn = 'uid=%s,ou=People,%s' % (username, b)
    conn.passwd_s(dn, None, password)


def user_show(b, username):
    base_dn = 'ou=People,%s' % b
    filter = '(uid=%s)' % username

    for dn, attrs in conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter):
        output = str(attrs).replace("'", "").replace("[", "").replace("]", "")
        output = output.replace("{", "").replace("}", "").replace(",", "\n")
        print output


def user_uidNumber(b, username):
    """Utility function to get the numeric id from a username"""

    base_dn = 'ou=People,%s' % b
    filter = '(uid=%s)' % username
    attrs = ['uidNumber']

    for dn, attrs in conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter, attrs):
        return attrs['uidNumber'][0]


def group_list(b):
    """List groups defined in the system"""

    base_dn = 'ou=Group,%s' % b
    filter = '(objectclass=posixGroup)'

    for dn, attrs in conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter):
        print attrs['gidNumber'][0], attrs['cn'][0]


def group_delete(b, groupname):
    """Delete a user from the system"""

    try:
        dn = 'cn=%s,ou=Group,%s' % (groupname, b)
        conn.delete_s(dn)
    except Exception, error:
        pass


def group_add(b, groupname):
    """Add a group to the LDAP"""

    gidNumber = increment_gid(b)

    dn = 'cn=%s,ou=Group,%s' % (groupname, b)
    add_record = [
     ('objectclass', ['top', 'posixGroup']),
     ('cn', [groupname]),
     ('gidNumber', [gidNumber])
    ]
    conn.add_s(dn, add_record)


def group_addusers(b, groupname, username):
    """Add users to a group"""

    dn = 'cn=%s,ou=Group,%s' % (groupname, b)

    for name in username:
        try:
            mod_attrs = []
            mod_attrs.append((ldap.MOD_ADD, 'memberuid', name))
            conn.modify_s(dn, mod_attrs)
        except Exception, error:
            print "Error adding %s to %s: %s" % (name, groupname, error)


def group_delusers(b, groupname, username):
    """Remove users from a group"""

    dn = 'cn=%s,ou=Group,%s' % (groupname, b)
    mod_attrs = []

    for name in username:
        mod_attrs.append((ldap.MOD_DELETE, 'memberuid', name))

    conn.modify_s(dn, mod_attrs)


def group_show(b, groupname):
    base_dn = 'ou=Group,%s' % b
    filter = '(cn=%s)' % groupname

    for dn, attrs in conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter):
        output = str(attrs).replace("'", "").replace("[", "").replace("]", "")
        output = output.replace("{", "").replace("}", "").replace(",", "\n")
        print output


@retry(stop_max_delay=10000)
def increment_uid(b):
    """Generate a new userid"""

    dn = 'cn=uid,%s' % b
    filter = 'objectclass=*'
    attrs = ['uidNumber']

    result = conn.search_s(dn, ldap.SCOPE_SUBTREE, filter, attrs)
    uidNumber = result[0][1]['uidNumber'][0]

    mod_attrs = [(ldap.MOD_DELETE, 'uidNumber', uidNumber),
                 (ldap.MOD_ADD, 'uidNumber', str(int(uidNumber)+1))]

    conn.modify_s(dn, mod_attrs)
    return uidNumber


@retry(stop_max_delay=10000)
def increment_gid(b):
    """Generate a new groupid"""

    dn = 'cn=gid,%s' % b
    filter = 'objectclass=*'
    attrs = ['uidNumber']

    try:
        result = conn.search_s(dn, ldap.SCOPE_SUBTREE, filter, attrs)
        gidNumber = result[0][1]['uidNumber'][0]

        mod_attrs = [(ldap.MOD_DELETE, 'uidNumber', gidNumber),
                     (ldap.MOD_ADD, 'uidNumber', str(int(gidNumber)+1))]

        conn.modify_s(dn, mod_attrs)
    except Exception, e:
        print e
        raise

    return gidNumber


def csep(s):
    "Utility function to split a comma separated string into a list of strings"

    try:
        return s.split(',')
    except:
        raise argparse.ArgumentTypeError("Illegal groups value")


parser = argparse.ArgumentParser(prog='obol',
                                 description='Manage Cluster Users.')

# LDAP bind parameters
parser.add_argument('-D', metavar="BIND DN", default='cn=Manager,dc=local')
parser.add_argument('-w', metavar="BIND PASSWORD", required=True)
parser.add_argument('-H', metavar="HOST", default='ldap://localhost')
parser.add_argument('-b', metavar="BASE_DN", default='dc=local')

# Obol command categories
subparsers = parser.add_subparsers(help='commands', dest='target')

users = subparsers.add_parser('user', help='User commands')
user_commands = users.add_subparsers(dest='command')

groups = subparsers.add_parser('group', help='Group commands')
group_commands = groups.add_subparsers(dest='command')

# User commands
command = user_commands.add_parser('add', help='Add a user')
command.add_argument('username')
command.add_argument('--password')
command.add_argument('--cn', metavar="COMMON NAME")
command.add_argument('--sn', metavar="SURNAME")
command.add_argument('--givenName')
command.add_argument('--shell', default='/bin/bash')
command.add_argument('--groups', type=csep,
                     help='A comma separated list of group names')
command.add_argument('--expire', metavar="DAYS",
                     help=('Number of days after which the account expires. '
                           'Set to -1 to disable'))

command = user_commands.add_parser('delete', help='Delete a user')
command.add_argument('username')

command = user_commands.add_parser('show', help='Show user details')
command.add_argument('username')

command = user_commands.add_parser('reset', help='Reset user password')
command.add_argument('username')
command.add_argument('--password')

command = user_commands.add_parser('modify', help='Modify a user attribute')
command.add_argument('username')
command.add_argument('--cn', metavar="COMMON NAME")
command.add_argument('--sn', metavar="SURNAME")
command.add_argument('--givenName')
command.add_argument('--shell', default='/bin/bash')
command.add_argument('--expire', metavar="DAYS",
                     help=('Number of days after which the account expires. '
                           'Set to -1 to disable'))

command = user_commands.add_parser('list', help='List users')

# Group commands
command = group_commands.add_parser('add', help='Add a group')
command.add_argument('groupname')

command = group_commands.add_parser('show', help='Show group details')
command.add_argument('groupname')

command = group_commands.add_parser('addusers', help='Add users to a group')
command.add_argument('groupname')
command.add_argument('username', nargs='+')

command = group_commands.add_parser('delete', help='Delete a group')
command.add_argument('groupname')

command = group_commands.add_parser('delusers',
                                    help='Delete users from a group')
command.add_argument('groupname')
command.add_argument('username', nargs='+')

command = group_commands.add_parser('list', help='List groups')


if __name__ == '__main__':
    args = parser.parse_args()
    target = args.target
    command = args.command
    dn = args.D
    password = args.w
    host = args.H
    conn = ldap.initialize(host)
    conn.simple_bind_s(dn, password)

    # Load defaults from /etc/obol/config.py
    try:
        sys.path.append('/etc/obol/')
        import config
    except:
        config = None
        pass

    try:
        ldapuser = sys.modules[__name__]
        cmd = getattr(ldapuser, '%s_%s' % (target, command))
        args_d = vars(args)

        del args_d['target']
        del args_d['command']
        del args_d['D']
        del args_d['w']
        del args_d['H']

        cmd(**args_d)

    except Exception, e:
        print e
        raise
