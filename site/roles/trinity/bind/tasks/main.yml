---
# tasks file for bind

- name: Install bind packages
  yum:
    name: "{{ bind_packages }}"
    state: present
  tags: install-only

- block:
    - name: Selinux fcontext on files
      sefcontext:
        target: "{{ bind_db_path }}(/.*)?"
        setype: named_zone_t

    - name: Selinux permissions for {{ bind_db_path }}/data
      sefcontext:
        target: "{{ bind_db_path }}/data(/.*)?"
        setype: named_cache_t

    - name: Selinux  permissions for {{ bind_db_path }}/dynamic
      sefcontext:
        target: "{{ bind_db_path }}/dynamic(/.*)?"
        setype: named_cache_t
  when: not ansible_virtualization_type=="docker"

- name: Ensure {{ bind_db_path }} exists
  file:
    path: "{{ item }}"
    owner: root
    group: named
    setype: named_zone_t
    state: directory
  with_items:
    - "{{ bind_db_path }}"

- name: Ensure {{ bind_db_path }} data directories exists
  file:
    path: "{{ item }}"
    owner: named
    group: named
    setype: named_cache_t
    state: directory
  with_items:
    - "{{ bind_db_path }}/data"
    - "{{ bind_db_path }}/dynamic"

- name: Update named data path
  replace:
    path: /etc/named.conf
    regexp: "/var/named"
    replace: "{{ bind_db_path }}"
    backup: "yes"
  notify: restart named

- name: Configure named to listen on all ports
  replace:
    path: /etc/named.conf
    regexp: "{{ item }}"
    replace: " any; "
  with_items:
    - ' localhost; '
    - ' 127\.0\.0\.1; '
    - ' ::1; '
  notify: restart named

- name: Toggle DNSSEC
  lineinfile:
    path: /etc/named.conf
    line: 'dnssec-enable {{ bind_dnssec_enable }};'
    regexp: "dnssec-enable"
  notify: restart named
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version']|int < 9

- name: Toggle DNSSEC validation
  lineinfile:
    path: /etc/named.conf
    line: 'dnssec-validation {{ bind_dnssec_enable }};'
    regexp: "dnssec-validation"
  notify: restart named

# - name: Configure named forwarders
#  blockinfile:
#    path: /etc/named.conf
#    insertafter: "recursion yes;"
#    marker: "// {mark} forwarders"
#    block: |
#      {% if ansible_dns["nameservers"] is defined or bind_dns_forwarders %}
#          forwarders {
#            {% if bind_dns_forwarders %}
#              {% for f in bind_dns_forwarders %}{{ f }}; {% endfor %}
#            {% else %}
#              {% for f in ansible_dns["nameservers"] %}{% if f not in ansible_all_ipv4_addresses%}{{ f }};{% endif %} {% endfor %}
#            {% endif %}
#          };
#      {% endif %}
#  notify: restart named

- name: Render /etc/resolv.conf
  template:
    src: "resolv.conf.j2"
    dest: "/etc/resolv.conf"
    backup: "yes"
  when: not ansible_virtualization_type=="docker"

# - name: Check if the directory exists
#  stat:
#    path: "{{ trix_local }}/etc/dhcp"
#  register: dhcp_directory

# - name: Ensure directory
#  file:
#    state: directory
#    path: "{{ trix_local }}/etc/dhcp"
#  when: not dhcp_directory.stat.exists

- name: Preserve resolv.conf from being overwritten
  copy:
    src: dhclient-enter-hooks
    dest: /etc/dhcp/dhclient-enter-hooks
    mode: 0755
    backup: "yes"

- name: Enable named service
  service:
    name: named
    enabled: "yes"

- block:
    - name: Copy default zones to {{ bind_db_path }}
      synchronize:
        src: /var/named/
        dest: "{{ bind_db_path }}"
      when: not ansible_virtualization_type=="docker"
    #  creates: "{{ bind_db_path }}/named.empty"
    # - name: Copy default zones to {{ bind_db_path }}
    #  shell: rsync -raW -AX /var/named/* {{ bind_db_path }}
    #  args:
    #    creates: "{{ bind_db_path }}/named.empty"

    - name: Start named service
      service:
        name: named
        state: started

#  when: primary | default(True)
