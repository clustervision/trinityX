---
- name: Get image path
  set_fact:
    image_path: "{{ trix_images }}/{{ image_name }}"

- name: Create dir for compute image
  file:
    name: "{{ image_path }}"
    state: directory

- name: Install required packages
  yum:
    name: "{{ required_packages }}"
    state: present

- name: Build basic Ubuntu image
  shell: "debootstrap --variant=buildd {{ ubuntu_distribution_release }} {{ image_path }} {{ ubuntu_distribution_source }} | tee /tmp/debootstrap.log"
  ignore_errors: true

- name: Verify build
  shell: "grep 'E:' /tmp/debootstrap.log || true"

- name: Create {{ image_path }}/dev
  file:
    path: "{{ image_path }}/dev/"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Create basic /dev files
  command: "/usr/bin/mknod {{ image_path }}/dev/{{ item.dev }} {{ item.t }} {{ item.ma }} {{ item.mi }} creates={{ image_path }}/dev/{{ item.dev }}"
  args:
    creates: "{{ image_path }}/dev/{{ item.dev }}"
  with_items:
    - {dev: "null", mo: "666", t: 'c', ma: 1, mi: 3}  # device, mode, type, major, minor
    - {dev: "zero", mo: "666", t: 'c', ma: 1, mi: 5}
    - {dev: "random", mo: "666", t: 'c', ma: 1, mi: 8}
    - {dev: "urandom", mo: "666", t: 'c', ma: 1, mi: 9}
    - {dev: "console", mo: "600", t: 'c', ma: 5, mi: 1}
    - {dev: "ptmx", mo: "666", t: 'c', ma: 5, mi: 2}
    - {dev: "tty", mo: "666", t: 'c', ma: 5, mi: 0}

  # seen in the field where /dev/null had wrong permissions for unknown reasons. apt will fail.
- name: Ensure /dev/null is worldwide writeable
  file:
    path: "{{ image_path }}/dev/null"
    mode: "0666"

- name: Configure repos
  lineinfile:
    path: "{{ image_path }}/etc/apt/sources.list"
    line: "deb http://archive.ubuntu.com/ubuntu {{ ubuntu_distribution_release }} main universe"
    state: present
    create: 'yes'

- name: Updating Apt
  shell: "chroot {{ image_path }} apt-get update"
  ignore_errors: true

- name: Install core packages - @core, kernel and grub2
  shell: "chroot {{ image_path }} apt-get -y install {{ item }}"
  with_items: "{{ image_core_packages }}"

- name: Download luna2-client package
  get_url:
    url: "{{ luna2_client_package }}"
    dest: "{{ image_path }}/tmp/{{ luna2_client_package|split('/')|last }}"
#    validate_certs: false

- name: install luna2-client package
  shell: "chroot {{ image_path }} dpkg --force-architecture -i /tmp/{{ luna2_client_package|split('/')|last }}"

- name: Make .ssh root directory
  file:
    path: "{{ image_path }}/root/.ssh"
    mode: 0700
    owner: root
    group: root
    state: directory

- name: Ensure /etc/trinity/passwords/images/{{ image_name }} exists
  file:
    path: '/etc/trinity/passwords/images/{{ image_name }}'
    state: directory

- name: Store root password if defined
  template:
    src: root.txt
    dest: '/etc/trinity/passwords/images/{{ image_name }}/root.txt'
  when: image_password|default([])

- name: Disable tinysshd if it is there
  shell: "chroot {{ image_path }} systemctl disable tinysshd.socket"
  ignore_errors: true

- name: Generate SSH keys
  user:
    name: root
    generate_ssh_key: true
    ssh_key_file: "{{ image_path }}/root/.ssh/id_rsa"

- name: Add controller's key to authorized keys
  authorized_key:
    user: root
    state: present
    key: '{{ lookup("file", "/root/.ssh/id_rsa.pub") }}'
    path: "{{ image_path }}/root/.ssh/authorized_keys"

- name: Add cluster key to authorized keys
  authorized_key:
    user: root
    state: present
    key: '{{ lookup("file", "/root/.ssh/id_cluster_rsa.pub") }}'
    path: "{{ image_path }}/root/.ssh/authorized_keys"
  when: ha | default(False)

- name: Verify if image already exists in luna
  shell: "luna osimage show {{ image_name }}"
  register: ubuntu_image_in_luna
  ignore_errors: true

- name: Creating image in luna
  shell: "luna osimage add -p \"{{ trix_images }}/{{ image_name }}\" -D ubuntu {{ image_name }} -qo \"net.ifnames=0 biosdevname=0\""
  when: ubuntu_image_in_luna is defined and ubuntu_image_in_luna.rc|int != 0

- name: Create node config directory
  file:
    path: '{{ image_path }}/{{ trix_luna }}/node/config/'
    state: directory

- name: Render node luna.ini
  template:
    src: 'luna2.ini.j2'
    dest: '{{ image_path }}/{{ trix_luna }}/node/config/luna.ini'
    owner: root
    group: root
    mode: 0640

- name: Kernel version in image
  shell: "ls {{ image_path }}/lib/modules|sort|tail -n1"
  register: kernel_version
  changed_when: false

- name: Set the kernel version for image
  ansible.builtin.shell:
    cmd: "luna osimage change -ver {{ kernel_version.stdout }} {{ image_name }}"

# needs to be done after image setup - Antoine
# - name: Pack the image
#  ansible.builtin.shell:
#    cmd: "luna osimage pack {{ image_name }}"

- name: Refresh the list of hosts in the inventory
  meta: refresh_inventory
