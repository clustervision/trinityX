#!/usr/bin/env python3

__version__     = '15.2.0.0'

import time
from alert_fetcher import AlertFetcher
from node_utils import NodeUtils
from logger import Logger
from config import AUTO_UNDRAIN, ALERT_FETCH_INTERVAL


log = Logger.get_logger("TRIX-DRAINER: drainer")



class Drainer:
    """
    Main class responsible for syncing Slurm node states with NHC alerts from Alertmanager.
    """

    def __init__(self):
        self.fetcher = AlertFetcher()
        self.node_utils = NodeUtils()
        self.previous_alert_reasons = {}

    def main(self):
        """
        Main drainer logic.
        Contains all the logical comparisons & takes decisions
        """
        # Step 1: Fetch node states
        all_nodes, not_drained_nodes, drainer_drained_nodes = self.node_utils.get_node_states()
        all_nodes_set = set(all_nodes)
        not_drained_set = set(not_drained_nodes)
        drainer_drained_set = set(drainer_drained_nodes)

        # Step 2: Fetch active NHC alerts as {node: [reasons]}
        nhc_alerts = self.fetcher.map_alerts_to_nodes()
        nhc_nodes_set = set(nhc_alerts.keys())

        # Step 2b: If any controller NHC alert is active -> global drain
        controller_reasons = self.fetcher.get_controller_nhc_reasons()
        controller_active = len(controller_reasons) > 0
        if controller_active:
            if len(controller_reasons) > 1:
                controller_reason = "Controller NHC alert(s) active (job=luna_controllers); check AlertX for details"
            else:
                controller_reason = f"Controller NHC: {controller_reasons[0]}"

            log.info("Controller NHC alert active → draining ALL nodes")
            for node in all_nodes_set:
                is_not_drained = node in not_drained_set
                is_drainer_drained = node in drainer_drained_set

                if is_not_drained:
                    self.node_utils.drain_node(node, controller_reason)
                    self.previous_alert_reasons[node] = controller_reason
                elif is_drainer_drained:
                    # keep it drained; update reason if it changed
                    prev = self.previous_alert_reasons.get(node)
                    if prev != controller_reason:
                        self.node_utils.update_drain_reason(node, controller_reason)
                        self.previous_alert_reasons[node] = controller_reason

            # IMPORTANT: skip the normal logic while controller alert is active, next section takes care of undraining
            return

        for node in all_nodes_set:
            has_alert = node in nhc_nodes_set
            is_not_drained = node in not_drained_set
            is_drainer_drained = node in drainer_drained_set

            # Case 1: Not drained, has alert => DRAIN
            if is_not_drained and has_alert:
                if len(nhc_alerts[node]) > 1:
                    log.debug(f"Node {node} has multiple NHC reasons: {nhc_alerts[node]}")
                    reason = "Multiple reasons for drained node, check AlertX for more information"
                else:
                    reason = nhc_alerts[node][0]
                self.node_utils.drain_node(node, reason)
                self.previous_alert_reasons[node] = reason  # cache it immediately
                continue

            # Case 2: Drained by us, no alert => UN-DRAIN (if enabled)
            if not is_not_drained and not has_alert and is_drainer_drained:
                if AUTO_UNDRAIN:
                    self.node_utils.undrain_node(node)
                else:
                    log.debug(f"Node {node} is drainer-drained and no alert exists, but AUTO_UNDRAIN is disabled.")
                continue

            # Case 3: Drained by us, still has alert => check if reason changed
            if not is_not_drained and has_alert and is_drainer_drained:
                if len(nhc_alerts[node]) > 1:
                    log.debug(f"Node {node} still has multiple NHC reasons: {nhc_alerts[node]}")
                    reason = "Multiple reasons for drained node, check AlertX for more information"
                else:
                    reason = nhc_alerts[node][0]
                # check if reason changed
                previous_reason = self.previous_alert_reasons.get(node)
                if previous_reason != reason:
                    log.debug(f"Reason for {node} changed → updating: '{previous_reason}' → '{reason}'")
                    self.node_utils.update_drain_reason(node, reason)
                    self.previous_alert_reasons[node] = reason  # update inline
                else:
                    log.debug(f"Reason for {node} unchanged. No update needed.")
                continue

            # Other cases (e.g. drained externally, no alert) => No action
            log.debug(f"Node {node}: No drain/undrain action needed.")
            
    def launch(self):
        """
        Continuously runs the drainer logic at fixed intervals.
        """
        log.info(f"Starting TRIX-DRAINER loop with interval {ALERT_FETCH_INTERVAL} seconds")
        while True:
            try:
                self.main()
            except Exception as e:
                log.error(f"Unexpected error in drainer loop: {e}")
            time.sleep(ALERT_FETCH_INTERVAL)
    
    def test_main(self):
        """
        For debug purposes only
        """
        print(self.fetcher.get_nhc_alerts())
        return 0

if __name__ == "__main__":
    drainer = Drainer()
    drainer.launch()
