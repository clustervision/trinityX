---
# tasks file for nfs

- name: Install nfs packages
  yum:
    name: '{{ nfs_packages }}'
    state: present
  tags: install-only
  retries: "{{ rpm_retries | default(3) }}"
  delay: "{{ rpm_delay | default(15) }}"

- name: Enable NFS over RDMA
  set_fact:
    nfs_proto: '{{ "rdma" if nfs_enable_rdma == true else "tcp" }}'

- name: Create {{ nfs_exports_path }} if needed
  file:
    path: '{{ nfs_exports_path }}'
    state: directory

- name: Render nfs_exports based on nfs_exports and nfs_remote_mask info
  set_fact:
    nfs_exports_: "{{ nfs_exports_|d([]) + [item|combine({'disabled': item.disabled|default(False),
                                                          'type': _type|from_yaml,
                                                          'path': _path|from_yaml|default(item.path,true)})] }}"
  loop: "{{ nfs_exports }}"
  vars:
      _path: |
        {% if nfs_use_mask %}
          {% if item.path in nfs_remote_mask | map(attribute="name") or item.path in nfs_remote_mask | map(attribute="mount",default="__undefined__") %}
            {% for disk in nfs_remote_mask %}
              {% if disk.name == item.path or (disk.mount is defined and disk.mount == item.path) %}
                {% if disk["xmount"] is defined and disk["xmount"] %}
                  {{ nfs_prefix_path+item.path }}
                {% else %}
                  {{ item.path }}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% else %}
            {% for disk in nfs_remote_mask %}
              {% if disk.partitions is defined %}
                {% for partition in disk.partitions %}
                  {% if partition["mount"] == item.path %}
                    {% if partition["xmount"] is defined and partition["xmount"] %}
                      {{ nfs_prefix_path+item.path }}
                    {% else %}
                      {{ item.path }}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% else %}
          {{ item.path }}
        {% endif %}
      _type: |
        {% if nfs_use_mask %}
          {% if item.path in nfs_remote_mask | map(attribute="name") or item.path in nfs_remote_mask | map(attribute="mount",default="__undefined__") %}
            {% for disk in nfs_remote_mask %}
              {% if disk.name == item.path or (disk.mount is defined and disk.mount == item.path) %}
                {% if disk["type"] is defined %}
                  {{ disk["type"] }}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endif %}

- name: Overwrite nfs_mounts fact
  set_fact:
    new_nfs_exports: "{{ nfs_exports_ }}"
  when:
    - nfs_exports_ | length > 0
    - nfs_exports | length > 0

- name: Overwrite nfs_exports fact
  set_fact:
    new_nfs_exports: "{{ nfs_exports }}"
  when: nfs_exports_ is not defined or nfs_exports_ | length == 0

- name: Ensure exported paths exist
  file:
    path: "{{ item.path }}"
    state: directory
  with_items: "{{ new_nfs_exports }}"
  when:
    - item.path is defined 
    - item.type is defined and item.type != 'manual' and item.type != 'nfs'

- name: Setup NFS exports in {{ nfs_exports_path }}
  template:
    src: 'exports.j2'
    dest: '{{ nfs_exports_path }}/trinity.exports'

- name: Add link to the exports file in /etc/exports.d
  file:
    src: '{{ nfs_exports_path }}/trinity.exports'
    dest: '/etc/exports.d/trinity.exports'
    state: link
    force: true
    follow: false
  when: nfs_exports_path|string not in '/etc/exports.d'

- name: Render nfsmount.conf configuration file
  template:
    src: 'nfsmount.conf.j2'
    dest: '/etc/nfsmount.conf'

- name: Start and enable nfs server
  service:
    name: nfs-server
    state: started
    enabled: true
  when: not ha|default(False)

- name: Refresh exportfs
  shell: "exportfs -a"
  ignore_errors: true

- block:
  - name: Create shared directory for data that should survive a failover
    file:
      path: '{{ trix_ha }}/var/lib/nfs'
      state: directory

  - name: Add NFS server pacemaker resource
    pcs_resource:
      name: 'nfs-server'
      resource_class: 'ocf'
      resource_type: 'nfsserver'
      options: 'nfs_shared_infodir="{{ trix_ha }}/var/lib/nfs" meta migration-threshold=3 failure-timeout=120s op monitor interval=47s --group Trinity-stack'
      state: present
    tags: pcs
  when: primary|default(True) and ha|default(False)
    
