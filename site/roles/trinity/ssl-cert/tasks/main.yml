---
- block:

  - name: Ensure '{{ ssl_cert_owner }}' user exists
    user:
      name: '{{ ssl_cert_owner }}'
      uid: '{{ ssl_cert_owner_id }}'
      system: 'yes'
    when: ssl_cert_owner not in 'root'

  - name: Ensure '{{ ssl_cert_group }}' group exists
    group:
      name: '{{ ssl_cert_group }}'
      gid: '{{ ssl_cert_group_id }}'
      system: 'yes'

  when: on_controller|default(False)

- block:
  - name: Ensure {{ ssl_cert_path }} exists
    file:
      path: '{{ ssl_cert_path }}'
      state: directory
      setype: cert_t
      seuser: system_u

  - name: Generate a certificate authority for the cluster
    command: >
      openssl req -newkey rsa:4096
        -nodes -sha512 -x509
        -days {{ ssl_cert_days }}
        -subj "/C=NL/L=Amsterdam/O=ClusterVision Solutions BV./CN=clustervision.com"
        -out '{{ ssl_cert_path }}/cluster-ca.crt'
        -keyout '{{ ssl_cert_path }}/cluster-ca.key'
    args:
      creates: '{{ ssl_cert_path }}/cluster-ca.crt'
  when: 
    - primary | default(True)
    - on_controller | default(False)

# -- start sync
- name: Copy cluster CA certificate from sync
  copy:
    src: '{{ trix_sync }}/ssl/{{ item }}'
    dest: '{{ ssl_cert_path }}'
  with_items:
    - cluster-ca.crt
    - cluster-ca.key
  when: 
    - not primary | default(False)
    - on_controller | default(False)
    - ansible_connection not in 'chroot'
# -- end sync

- block:
  - name: Render subjectAltName configuration
    template:
      src: 'san.conf.j2'
      dest: '{{ ssl_cert_path }}/san.conf'
      mode: '0660'

  - name: Create a certificate request for each controller
    command: >
      openssl req -new -nodes -sha512
        -subj '/C={{ ssl_cert_country }}/ST={{ ssl_cert_state }}/L={{ ssl_cert_locality }}/O={{ ssl_cert_organization }}/CN={{ ansible_fqdn }}'
        -out '{{ ssl_cert_path }}/{{ ansible_fqdn }}.csr'
        -keyout '{{ ssl_cert_path }}/{{ ansible_fqdn }}.key'
        -config '{{ ssl_cert_path }}/san.conf'
    args:
      creates: '{{ ssl_cert_path }}/{{ ansible_fqdn }}.csr'

  - name: Sign the certificate requests
    command: >
      openssl x509 -req
        -days {{ ssl_cert_days }}
        -in '{{ ssl_cert_path }}/{{ ansible_fqdn }}.csr'
        -CA '{{ ssl_cert_path }}/cluster-ca.crt'
        -CAkey '{{ ssl_cert_path }}/cluster-ca.key'
        -out '{{ ssl_cert_path }}/{{ ansible_fqdn }}.crt'
        -extensions req_ext
        -extfile '{{ ssl_cert_path }}/san.conf'
        -set_serial {{ ansible_date_time.epoch }}
    args:
      creates: '{{ ssl_cert_path }}/{{ ansible_fqdn }}.crt'

  - name: Create symlink for floating H/A controller
    file:
      src: '{{ ssl_cert_path }}/{{ ansible_fqdn }}.{{ item }}'
      dest: '{{ ssl_cert_path }}/{{ trix_ctrl_hostname }}.{{ item }}'
      state: link
    with_items:
      - crt
      - key
    when: 
      - ha | default(False)

  - name: Restrict access permissions to the private keys
    file:
      path: '{{ item }}'
      mode: 0640
    with_fileglob:
      - '{{ ssl_cert_path }}/*.key'

  - name: Update ownership of the certificates
    file:
      path: '{{ ssl_cert_path }}'
      owner: '{{ ssl_cert_owner }}'
      group: '{{ ssl_cert_group }}'
      setype: cert_t
      seuser: system_u
      recurse: 'yes'
  when: 
    - on_controller|default(False)
    - ansible_connection not in 'chroot'

# -- start sync
- block:
  - name: Ensure ssl sync directory exists
    file:
      path: '{{ trix_sync }}/ssl'
      state: directory

  - name: Add CA certificate to sync
    copy:
      src: '{{ ssl_cert_path }}/{{ item }}'
      dest: '{{ trix_sync }}/ssl/{{ item }}'
      mode: 0640
    with_items:
      - cluster-ca.crt
      - cluster-ca.key
  when:
    - primary | default(True)
    - ha | default(False)
    - on_controller|default(False)
    - ansible_connection not in 'chroot'
# --- end sync

- name: Add CA certificate to default trust store
  copy:
    src: '{{ ssl_cert_path }}/cluster-ca.crt'
    dest: '/etc/pki/ca-trust/source/anchors/cluster-ca.crt'
  register: cert_copy
  when: 
    - on_controller | default(False)

- name: Update certificate trust store
  shell: update-ca-trust
  changed_when: cert_copy.changed
  when: ansible_facts['os_family'] == "RedHat"

- name: Update certificate trust store
  shell: update-ca-certificates
  changed_when: cert_copy.changed
  when: ansible_facts['os_family'] == "Debian"
