---
# Initialize required variables
#
# Keep in mind that this role applies to the controllers
# as well as compute nodes and images

- name: Install init packages
  yum:
    name: '{{ item }}'
    state: present
  tags: install-only
  with_items: '{{ init_packages }}'
  when: init_packages is defined

- block:

  - debug:
      msg: "Using stream {{ trix_stream }}"

  - name: Check if this node is a controller
    set_fact:
      on_controller: '{{ True if "controllers" in group_names else False }}'

  - block:
    - name: Update the trix_ctrl_* variables in case of non-HA setup
      set_fact:
        trix_ctrl_hostname: '{{ trix_ctrl1_hostname }}'
        trix_ctrl_ip: '{{ trix_ctrl1_ip }}'
        trix_ctrl2_hostname: ''
        trix_ctrl2_ip: ''

    - name: Standard controller host list
      set_fact:
         all_ctrl_hostname:
           - '{{ trix_ctrl1_hostname }}'

    - name: Standard controller ip list
      set_fact:
        all_ctrl_ip:
          - '{{ trix_ctrl1_ip }}'
    when: not ha|default(False)

  - debug:
      msg: "trix_ctrl_hostname: {{ trix_ctrl_hostname }}, trix_ctrl_ip: {{ trix_ctrl_ip }}"

  - name: Check if this node is the primary controller
    set_fact:
      primary: '{{ True if trix_ctrl1_ip in ansible_all_ipv4_addresses and on_controller else False }}'
      on_controller: true

  - debug:
      msg: "Primary: {{ primary }}, on_controller: {{ on_controller }}"

  - name: Setting trix_external_fqdn
    set_fact:
      trix_external_fqdn: '{{ ansible_fqdn }}'
    when: (trix_external_fqdn is not defined) or trix_external_fqdn==""

  - debug:
      msg: "trix_external_fqdn: {{ trix_external_fqdn }}"

  tags: always


- block:
  - name: Verify if luna secret vault exists
    stat:
      path: "{{ trix_ssl }}/secret.key"
    register: stat_secret_key

  - block:
    - name: Generate Luna Secret Key
      set_fact:
        luna_secret_key: "{{ lookup('password', '/dev/null length=32 chars=abcdef0123456789') }}"

    - name: Write luna secret key to vault
      copy:
        dest: "{{ trix_ssl }}/secret.key"
        content: "{{ luna_secret_key }}"
    when: not stat_secret_key.stat.exists

  - block:
    - name: Import luna secret key
      slurp:
        src: "{{ trix_ssl }}/secret.key"
      register: luna_secret_key_b64

    - name: Set Luna secret key
      set_fact:
        luna_secret_key: "{{ luna_secret_key_b64['content'] | b64decode }}"
    when: stat_secret_key.stat.exists

  tags: always
  when: ansible_connection not in 'chroot' and on_controller


- block:
  - name: Standard controller host list
    set_fact:
       all_ctrl_hostname:
         - '{{ trix_ctrl1_hostname }}'
         - '{{ trix_ctrl2_hostname }}'

  - name: Adding controller 3 host
    set_fact:
      all_ctrl_hostname: '{{ all_ctrl_hostname + [ trix_ctrl3_hostname ] }}'
    when: trix_ctrl3_hostname is defined

  - name: Adding controller 4 host
    set_fact:
      all_ctrl_hostname: '{{ all_ctrl_hostname + [ trix_ctrl4_hostname ] }}'
    when: trix_ctrl4_hostname is defined

  - name: Standard controller ip list
    set_fact:
      all_ctrl_ip:
        - '{{ trix_ctrl1_ip }}'
        - '{{ trix_ctrl2_ip }}'

  - name: Adding controller 3 ip
    set_fact:
      all_ctrl_ip: '{{ all_ctrl_ip + [ trix_ctrl3_ip ] }}'
    when: trix_ctrl3_ip is defined

  - name: Adding controller 4 ip
    set_fact:
      all_ctrl_ip: '{{ all_ctrl_ip + [ trix_ctrl4_ip ] }}'
    when: trix_ctrl4_ip is defined

  - name: Standard controller bmc list
    set_fact:
      all_ctrl_bmc:
        - '{{ trix_ctrl1_bmcip }}'
        - '{{ trix_ctrl2_bmcip }}'

  - name: Adding controller 3 bmc
    set_fact:
      all_ctrl_bmc: '{{ all_ctrl_bmc + [ trix_ctrl3_bmcip ] }}'
    when: trix_ctrl3_bmcip is defined

  - name: Adding controller 4 bmc
    set_fact:
      all_ctrl_bmc: '{{ all_ctrl_bmc + [ trix_ctrl4_bmcip ] }}'
    when: trix_ctrl4_bmcip is defined

  - debug:
      msg: 'all_ctrl_hostname: {{ all_ctrl_hostname }}'
  when: ha
  tags: always,ha


- block:
  - name: Collecting controller interface information
    include_tasks: interface.yml
    with_items: "{{ all_ctrl_ip }}"
    loop_control:
      loop_var: inner_loop_var

  - debug:
      msg: "trix_ctrl_interface: {{ trix_ctrl_interface }}"
    when: trix_ctrl_interface is defined

  - name: Verify internal controller interface is configured
    fail:
      msg: "Interface with config set in 'trix_ctrl1_ip' ({{ trix_ctrl1_ip }}) or 'trix_ctrlX_ip' ({{ trix_ctrl2_ip }}, ...) not found. Please make sure the interface is configured and up"
    when: trix_ctrl_interface is not defined or trix_ctrl_interface == ""

  tags: always
  when: ansible_connection not in 'chroot' and on_controller


- block:
  - name: Resolve admin group
    getent:
      database: group
      split: ':'
      key: '{{ admin_group }}'
    ignore_errors: true

  - name: Override admin group
    set_fact:
      admin_group: 'root'
    when: ansible_facts.getent_group is not defined

  - debug:
      msg: "admin_group: {{ admin_group }}"
  when: not enable_authentication|default(False)
  tags: always


- name: Toggle selinux state
  selinux:
    state: '{{ "permissive" if enable_selinux else "disabled" }}'
    policy: 'targeted'

# Workaround the issue where NM is left running in the system
# after it has been removed
# - name: Is NetworkManager running?
#   shell: systemctl status NetworkManager
#   register: NM_service
#   failed_when: false
#   changed_when: false
#   ignore_errors: true

# - name: Stop NetworkManager
#   service:
#     name: NetworkManager
#     state: stopped
#   when: NM_service.rc == 0 and
#         'chroot' not in ansible_connection

# - name: Remove NetworkManager
#   yum:
#     name: NetworkManager
#     state: absent
