---
- name: Install zabbix checks
  yum:
    name: trix-zabbix-checks
    state: present
  tags: install-only

- block:
  - name: MySQL-python
    yum:
      name: MySQL-python
      state: present

  - name: Acquire zabbix SQL password (generate or use one from /etc/trinity/passwords)
    set_fact:
      zabbix_sql_pwd: "{{ lookup('password',
                        '/etc/trinity/passwords/mysql/zabbix.txt
                         chars=ascii_letters,digits,hexdigits') }}"

  - name: Acquire zabbix Admin password (generate or use one from /etc/trinity/passwords)
    set_fact:
      zabbix_admin_pwd: "{{ lookup('password',
                        '/etc/trinity/passwords/zabbix/admin.txt
                         chars=ascii_letters,digits,hexdigits') }}"

  - name: Create cmdline to access sql
    set_fact:
      cmd_sql: >
        mysql --user=zabbix --password={{ zabbix_sql_pwd }}
        --database=zabbix --host=localhost --batch --skip-column-names

  - name: Check if regexp exists in zabbix DB
    command: >
      {{ cmd_sql }}
      --execute="SELECT * FROM regexps WHERE \
                 regexpid={{ zabbix_checks_sql_regexpid }};"
    register: zabb_select_regexp_out
    changed_when: False

  - name: Add record for regexp
    command: >
      {{ cmd_sql }}
      --execute="DELETE FROM regexps WHERE \
                    regexpid={{ zabbix_checks_sql_regexpid }}; \
                 INSERT INTO regexps VALUES \
                    ( {{ zabbix_checks_sql_regexpid }}, \"Mounts\", \"\");"
    when: zabb_select_regexp_out.stdout != "1000\tMounts\t"

  - name: Check if expression exists in zabbix DB
    command: >
      {{ cmd_sql }}
      --execute="SELECT * FROM expressions WHERE \
                 expressionid={{ zabbix_checks_sql_expressionid }};"
    register: zabb_select_expression_out
    changed_when: False

  - name: Add record for expression
    command: >
      {{ cmd_sql }}
      --execute="DELETE FROM expressions WHERE \
                    expressionid={{ zabbix_checks_sql_expressionid }}; \
                 INSERT INTO expressions VALUES \
                    ( 1000, 1000, \".*\", 3, \",\", 0 );"
    when: zabb_select_expression_out.stdout != "1000\t1000\t.*\t3\t,\t0"

  - name: Import all templates
    zabbix_conf:
      username: "Admin"
      password: "{{ zabbix_admin_pwd  }}"
      hostname: "localhost"
      proto: "https"
      validate_certs: no
      object:   "configuration"
      action:   "set"
      params:
        format: "xml"
        rules:
          hosts:
            createMissing: true
            updateExisting: false
          templates:
            createMissing: true
            updateExisting: false
          applications:
            createMissing: true
          discoveryRules:
            createMissing: true
            updateExisting: false
          graphs:
            createMissing: true
            updateExisting: false
          triggers:
            createMissing: true
            updateExisting: false
          items:
            createMissing: true
            updateExisting: false
            deleteMissing: true
          templateLinkage:
            createMissing: true
          httptests:
            createMissing: true
        source: "{{ lookup('file', item )}}"
    with_fileglob:
      - "/usr/lib/zabbix/templates/00*.xml"
      - "/usr/lib/zabbix/templates/01*.xml"
      - "/usr/lib/zabbix/templates/02*.xml"

  - name: Configuring mail forwarding, creating host groups
    zabbix_conf:
      username: "Admin"
      password: "{{ zabbix_admin_pwd  }}"
      hostname: "localhost"
      proto: "https"
      validate_certs: no
      object:   "{{ item.object }}"
      action:   "{{ item.action }}"
      filter:   "{{ item.filter }}"
      params:   "{{ item.params }}"
    with_items:
      - { object: "mediatype", action: "set", filter: { description: "Local e-mail" } , params: { smtp_server: "127.0.0.1" } }
      - { object: "hostgroup", action: "set", filter: { }, params: { name: "Compute" } }
      - { object: "hostgroup", action: "set", filter: { }, params: { name: "Controller" } }
      - { object: "hostgroup", action: "set", filter: { }, params: { name: "Login" } }
      - { object: "hostgroup", action: "set", filter: { }, params: { name: "Storage" } }

  - name: "Create or update (HA) controller host"
    local_action: 
      module: zabbix_host
      server_url: https://localhost/zabbix
      login_user: admin
      login_password: "{{ zabbix_admin_pwd }}"
      host_name: "{{ trix_ctrl_hostname }}.{{ trix_domain }}"
      visible_name: "Controller{{ '\ HA' if ha else '' }}"
      host_groups:
        - Controller
      link_templates:
        - "CV role Controller{{ '\ HA' if ha else '' }}"
      inventory_mode: disabled
      interfaces:
        - dns: "{{ trix_ctrl_hostname }}.{{ trix_domain }}"
          ip: "{{ trix_ctrl_ip }}"
          type: agent
          main: 1
          useip: 0
          port: 10050
      validate_certs: no

  when: primary|default(True)
        and ansible_connection not in 'lchroot'

- block:
  - name: Acquire zabbix Admin password (generate or use one from /etc/trinity/passwords)
    set_fact:
      zabbix_admin_pwd: "{{ lookup('password',
                        '/etc/trinity/passwords/zabbix/admin.txt
                         chars=ascii_letters,digits,hexdigits') }}"

  - name: Ensure host group
    local_action:
      module: zabbix_group
      server_url: https://localhost/zabbix
      login_user: admin
      login_password: "{{ zabbix_admin_pwd }}"
      validate_certs: no
      host_groups: "{{ image_name | capitalize }}"

  - name: Ensure template
    local_action:
      module: zabbix_template
      server_url: https://localhost/zabbix
      login_user: admin
      login_password: "{{ zabbix_admin_pwd }}"
      validate_certs: no
      template_name: "CV role {{ image_name | capitalize }}"
     
  - name: Get ID's
    zabbix_conf:
      username: "Admin"
      password: "{{ zabbix_admin_pwd  }}"
      hostname: "localhost"
      validate_certs: no
      proto: "https"
      object: "{{ item.object }}"
      action: "get"
      filter: "{{ item.filter }}"
    register: items
    with_items:
      - { object: "template", filter:  { host: "CV role {{ image_name | capitalize }}" } }
      - { object: "hostgroup", filter: { name: "{{ image_name | capitalize }}" } }
      - { object: "action", filter: { name: "Auto registration {{ image_name | capitalize }}" } }

  - set_fact:
      eventsource: 2
    when: items.results.2.result.0 is undefined

  - name: Configure auto-registration
    zabbix_conf:
      username: "Admin"
      password: "{{ zabbix_admin_pwd  }}"
      hostname: "localhost"
      proto: "https"
      validate_certs: no
      object: "action"
      action: "set"
      params:
        name: "Auto registration {{ image_name | capitalize }}"
        eventsource: "{{ eventsource | default(omit) }}"
        filter:
          evaltype: 0
          conditions:
            - conditiontype: 24
              value: "{{ image_name }}"
        operations:
          - operationtype: 6
            optemplate:
              - templateid: "{{ items.results.0.result.0.templateid }}"
          - operationtype: 2
          - operationtype: 4
            opgroup:
              - groupid: "{{ items.results.1.result.0.groupid }}"
  when: ansible_connection in 'lchroot'
