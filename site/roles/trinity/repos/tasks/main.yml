---
- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version}}.yaml"
    - "{{ ansible_os_family }}{{ ansible_distribution_major_version}}.yaml"
  ignore_errors: true

- block:
  - name: Rebuild RPM DB
    shell: "rpm --rebuilddb"
    ignore_errors: true

  - name: Configure TrinityX repos
    ansible.builtin.yum_repository:
      name: "{{ item.name }}"
      description: "{{ item.name }}"
      baseurl: "{{ item.repo }}"
      gpgcheck: "{{ item.gpgcheck | default(False) }}"
      gpgkey: "file://{{ item.gpgkey | default('') }}"
      reposdir: "{{ params.install_root + '/etc/yum.repos.d/' if params.install_root is defined else '/etc/yum.repos.d' }}"
    with_items: "{{ trinityx_repositories }}"
    when: item.name is defined

  - name: Configure gpg keys for TrinityX repos
    copy:
      dest: "{{ item.gpgkey }}"
      content: "{{ item.gpgdata }}"
    with_items: "{{ trinityx_repositories }}"
    when: item.gpgkey is defined and item.gpgdata is defined

  # - name: Add GPG keys to RPM DB. normally NOT needed - Antoine
  #   ansible.builtin.rpm_key:
  #     state: present
  #     key: "{{ item.gpgkey | default('') }}"
  #   with_items: "{{ trinityx_repositories }}"
  #   ignore_errors: True

  # - name: "Download external repo RPMS"
  #   get_url:
  #     url: 
  #     dest: "/tmp/{{ item.file }}"
  #   retries: 10
  #   delay: 15
  #   with_items: "{{ external_repository_rpms }}"

  - name: Install external repo RPMS
    dnf:
      name: "{{ item.name }}"
      disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
      state: present
      update_cache: true
      installroot: "{{ params.install_root if params.install_root is defined else '/' }}"
    retries: "{{ rpm_retries | default(3) }}"
    delay: "{{ rpm_delay | default(15) }}"
    with_items: "{{ external_repository_rpms }}"
    when: item.name is defined

  - name: Install external repo Packages
    dnf:
      name: "{{ item.name }}"
      disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
      state: present
      update_cache: true
      installroot: "{{ params.install_root if params.install_root is defined else '/' }}"
    retries: "{{ rpm_retries | default(3) }}"
    delay: "{{ rpm_delay | default(15) }}"
    with_items: "{{ package_based_repositories }}"
    when: item.name is defined

  - block:
    - name: Collect repository information
      shell: "rpm -qil {{ item.name }} | grep repos | grep etc"
      register: repo_files
      with_items: "{{ use_baseurl_repositories }}"

    - name: Calling baseurl task
      include_tasks: baseurl.yml
      with_items: "{{ repo_files.results }}"
      loop_control:
          loop_var: inner_loop_var
    when: use_baseurl_repositories is defined
    ignore_errors: true

  - name: Configure custom repos
    ansible.builtin.yum_repository:
      name: "{{ item.name }}"
      description: "{{ item.name }}"
      baseurl: "{{ item.repo }}"
      enabled: "{{ item.enabled | default(True) }}"
      gpgcheck: "{{ item.gpgcheck | default(False) }}"
      gpgkey: "file://{{ item.gpgkey | default('') }}"
      reposdir: "{{ params.install_root + '/etc/yum.repos.d/' if params.install_root is defined else '/etc/yum.repos.d' }}"
    with_items: "{{ custom_repositories }}"
    when: item.name is defined

  - name: Configure gpg keys for custom repos
    copy:
      dest: "{{ item.gpgkey }}"
      content: "{{ item.gpgdata }}"
    with_items: "{{ custom_repositories }}"
    when: item.gpgkey is defined and item.gpgdata is defined

  - name: Disable repos
    ansible.builtin.shell:
      cmd: "dnf config-manager --set-disable {{ item }}"
    with_items: "{{ disable_repositories }}"
    ignore_errors: true
    tags: disable_repos

  - name: Make caches
    shell: "dnf makecache -y"
    ignore_errors: true

  when: ansible_facts['os_family'] == "RedHat"
  tags: install-only

# Disable all remote repos (without *-local suffix)
# If we have local install
#
- block:

  # FIXME
  # Was trying to do it via yum_repos, lineinfile or ini_file
  # modules. Got monstrous construction at the end.
  - name: Install yum-utils to make yum-config-manager available
    yum:
      name: yum-utils
      state: installed
    retries: "{{ rpm_retries | default(3) }}"
    delay: "{{ rpm_delay | default(15) }}"

  - name: Disable all repo without '*-local' suffix
    shell: >
      yum-config-manager  \
      | sed -n 's/^\[\(.*\)\]$/\1/p' \
      | egrep -v "\-local$" \
      | xargs yum-config-manager --disable {}

    args:
      warn: false
  when: local_install | default(False)
