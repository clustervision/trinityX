---
- name: Add dracut.conf.d entries
  template:
    src: trinity.conf.j2
    dest: "{{ image_path}}/etc/dracut.conf.d/trinity.conf"

# - name: Copy gpg keys
#  copy:
#    remote_src: true
#    src: "/etc/pki/rpm-gpg"
#    dest: "{{ image_path }}/etc/pki/"

- name: Make .ssh root directory
  file:
    path: "{{ image_path }}/root/.ssh"
    mode: 0700
    owner: root
    group: root
    state: directory

- name: Ensure /etc/trinity/passwords/images/{{ image_name }} exists
  file:
    path: '/etc/trinity/passwords/images/{{ image_name }}'
    state: directory

- name: Store root password if defined
  template:
    src: root.txt
    dest: '/etc/trinity/passwords/images/{{ image_name }}/root.txt'
  when: image_password|default([])

- name: Generate SSH keys
  user:
    name: root
    generate_ssh_key: true
    ssh_key_file: "{{ image_path }}/root/.ssh/id_rsa"

- name: Add controller's key to authorized keys
  authorized_key:
    user: root
    state: present
    key: '{{ lookup("file", "/root/.ssh/id_rsa.pub") }}'
    path: "{{ image_path }}/root/.ssh/authorized_keys"

- name: Add cluster key to authorized keys
  authorized_key:
    user: root
    state: present
    key: '{{ lookup("file", "/root/.ssh/id_cluster_rsa.pub") }}'
    path: "{{ image_path }}/root/.ssh/authorized_keys"
  when: ha | default(False)

- name: Create node config directory
  file:
    path: '{{ image_path }}/{{ trix_luna }}/node/config/'
    state: directory

- name: Render node luna.ini
  template:
    src: 'luna2.ini.j2'
    dest: '{{ image_path }}/{{ trix_luna }}/node/config/luna.ini'
    owner: root
    group: root
    mode: 0640

- name: Verify if opensuse group already exists in luna
  shell: "luna group show {{ image_name }}"
  register: opensuse_group_in_luna
  ignore_errors: true

- name: Verify if image already exists in luna
  shell: "luna osimage show {{ image_name }}"
  register: suse_image_in_luna
  ignore_errors: true

- name: Fetching the distribution version from the image
  shell: "grep VERSION {{ image_path }}/etc/SUSE-brand | awk -F' = ' '{ print $2 }' || echo {{ ansible_distribution_major_version }}"
  ignore_errors: true
  register: image_major_version

- name: Creating image in luna
  shell: "luna osimage add --path \"{{ trix_images }}/{{ image_name }}\" --distribution opensuse --osrelease {{ image_major_version.stdout }} --quick-kerneloptions \"net.ifnames=0 biosdevname=0\" {{ image_name }}"
  when: suse_image_in_luna is defined and suse_image_in_luna.rc|int != 0

- name: Setting release for image
  shell: "luna osimage change --distribution opensuse --osrelease {{ image_major_version.stdout }} {{ image_name }}"
  when: suse_image_in_luna is defined and suse_image_in_luna.rc|int == 0

- name: Kernel version in image
  shell: "ls {{ image_path }}/lib/modules|sort|tail -n1"
  register: kernel_version
  changed_when: false

- name: Set the kernel version for image
  ansible.builtin.shell:
    cmd: "luna osimage change --kernelversion {{ kernel_version.stdout }} {{ image_name }}"

- block:
  - name: preparing part/post script
    copy:
      src: "opensuse/{{ item }}"
      dest: "/tmp/{{ item }}"
    with_items:
      - part.rd
      - post.rd

  - name: Creating group in luna
    shell: "luna group add --osimage {{ image_name }} -qpart /tmp/part.rd -qpost /tmp/post.rd {{ image_name }}"
  when: opensuse_group_in_luna is defined and opensuse_group_in_luna.rc|int != 0

- name: Refresh the list of hosts in the inventory
  meta: refresh_inventory

