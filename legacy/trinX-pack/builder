#!/bin/bash

######################################################################
# TrinityX
# Copyright (c) 2016  ClusterVision B.V.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (included with the sources) for more
# details.
######################################################################


readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))

#default file locations
KICKSTART='kickstart/default.ks'
MKISO='no'
OUTPUT_ISO="${PROGDIR}/custom.iso"

function usage () {
  printf '%b\n' "Builds a file structure to be used in building a ISO or USB disk.\n" \
                      "USAGE:\n" \
                      "$ ${PROGNAME} -i [ISO file] -b [y/N] \n" \
                      "  -i [ISO file]  - Path to CentOS ISO (default: ${OUTPUT_ISO})" \
                      "  -b [y//N]      - Build ISO (default: no)\n" \
                      "Options:\n" \
                      "  -m [md5sum]    - File can be checked to verify if it contains a valid CentOS image." \
                      "  -k [kickstart] - Optional kickstart file to be passed to the ISO structure." \
                      "  -o [output]    - Path to output file.\n"
}

while getopts ":i:m:b:k:o:" opt; do
  case "${opt}" in
    i)
      ISO=${OPTARG}
      ;;
    b)
      if ! { [[ $OPTARG =~ ^([yY][eE][sS]|[yY])$ ]] || [[ $OPTARG =~ ^([nN][oO]|[nN])$ ]]; }; then
        usage
        exit 1
      fi
      MKISO=${OPTARG}
      ;;
    m)
      HASH=${OPTARG}
      ;;
    k)
      KICKSTART=${OPTARG}
      ;;
    o)
      OUTPUT_ISO=${OPTARG}
      ;;
    *)
      usage
      exit 1
      ;;
    esac
done
shift $((OPTIND-1))

if { [[ -z "${ISO+x}" ]] || ! [[ -f "${ISO}" ]] || ! [[ -f "${KICKSTART}" ]]; }; then
  usage
  exit 1
fi

function check_iso_md5sum () {
  printf '%s %s\n' $FUNCNAME $@
  local MD5=($(md5sum "${ISO}"))
  if [[ "${MD5}" != "${HASH}" ]]; then
    printf '%s\n' 'ISO checksum failed, please check your ISO file.'
    exit 1
  fi
}

function create_directory_structure () {
  printf '%s %s\n' $FUNCNAME $@
  mkdir -p "${PROGDIR}"/iso
  mkdir -p "${PROGDIR}"/distribution/{packages,isolinux,ks,liveos}
}

function copy_iso_files () {
  printf '%s %s\n' $FUNCNAME $@
  mount -o loop "${ISO}" "${PROGDIR}"/iso &> /dev/null
  cp "${PROGDIR}"/iso/.discinfo "${PROGDIR}"/distribution/isolinux
  cp -r "${PROGDIR}"/iso/isolinux/. "${PROGDIR}"/distribution/isolinux
  cp -r "${PROGDIR}"/iso/images/. "${PROGDIR}"/distribution/images
  cp -r "${PROGDIR}"/iso/LiveOS/. "${PROGDIR}"/distribution/LiveOS
  cp -r "${PROGDIR}"/iso/Packages/. "${PROGDIR}"/distribution/Packages
  cp -r "${PROGDIR}"/iso/repodata/. "${PROGDIR}"/distribution/repodata
  cp $(readlink -f "${KICKSTART}") "${PROGDIR}"/distribution/ks/trinity.ks
  cp "${PROGDIR}"/custom/isolinux.cfg "${PROGDIR}"/distribution/isolinux
  umount "${PROGDIR}"/iso
}

#clean up, remove once done with your code
function cleanup () {
  printf '%s %s\n' $FUNCNAME $@
  rm -rf "${PROGDIR}"/iso
  rm -rf "${PROGDIR}"/distribution
}

function build_custom_iso () {
  printf '%s %s\n' $FUNCNAME $@
  cd "${PROGDIR}"/distribution
  mkisofs -o $(readlink -f "${OUTPUT_ISO}") -b isolinux/isolinux.bin -c boot.cat -no-emul-boot -V 'CentOS 7 x86_64' -boot-load-size 4 -boot-info-table -R -J -v -T .
}

function main () {
  if ! [[ -z "${HASH+x}" ]]; then check_iso_md5sum; fi
  create_directory_structure
  copy_iso_files
  if [[ "${MKISO}" =~ ^([yY][eE][sS]|[yY])$ ]]; then build_custom_iso; fi
  cleanup
}

main
